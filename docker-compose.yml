version: '3'

services:
  nginx:
    #image: nginx:latest - não é necessário pois foi definido no Dockerfile
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: loadBalancer
    ports:
      - 80:80
      - 8000:8000
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.1
    volumes:
      - ./app:/app
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web1
      - web2
      - web3

  web1:
    build:
      context: ./
      dockerfile: teste/Dockerfile
    container_name: web1
    ports:
      - 5001:80
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.2
    volumes:
      - ./consul/certs:/etc/consul.d/certs
      - ./app:/app
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  web2:
    build:
      context: ./
      dockerfile: teste/Dockerfile
    container_name: web2
    ports:
      - 5002:80
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.3
    volumes:
      - ./app:/app
      #- ./app:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf   

  web3:
    build:
      context: ./
      dockerfile: teste/Dockerfile
    container_name: web3
    ports:
      - 5003:80
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.4
    volumes:
      - ./app:/app     
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf

  postgres1:
    build:
      context: ./
      dockerfile: postgres/Dockerfile
    container_name: postgres1
    restart: always
    ports:
      - 5442:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./data/postgres1:/var/lib/postgresql/data
      - pg-config:/etc/postgresql
    entrypoint: docker-entrypoint.sh -c 'config_file=/etc/postgresql/postgresql.conf'
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.5

  postgres2:
    image: postgres
    container_name: postgres2
    restart: always
    ports:
      - 5443:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./data/postgres2:/var/lib/postgresql/data
      - pg-config:/etc/postgresql
    entrypoint: docker-entrypoint.sh -c 'config_file=/etc/postgresql/postgresql.conf'
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.6

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgAdmin
    restart: always
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    links:
     - pg_bouncer:pg_bouncer
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.7

  consul:
    build:
      context: ./consul
      dockerfile: Dockerfile
    #image: consul
    container_name: consul
    ports:
      - 9990:8500
    volumes:
     - ./consul/certs:/consul/certs
     - ./consul/consul.hcl:/etc/consul.d/consul.hcl
     - ./consul/server.hcl:/etc/consul.d/server.hcl
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.8

  pg_bouncer:
    build: 
      context: ./pgbouncer
      dockerfile: ./Dockerfile
    container_name: pgBouncer
    restart: always
    ports:
      - 6432:6432
    environment:
       #- DB_USER= ${PGBOUNCER_USER}
       #- DB_PASSWORD= ${PGBOUNCER_PASSWORD}
       #- DB_HOST= ${PGBOUNCER_HOST}
       #- DB_NAME= ${PGBOUNCER_DB}
       #- DB_port= 5432
       - POSTGRESQL_HOST= ${PGBOUNCER_HOST}
       - POSTGRESQL_USERNAME= ${PGBOUNCER_USER}
       - POSTGRESQL_PASSWORD= ${PGBOUNCER_PASSWORD}
    volumes:
      - ./pgbouncer/pgbouncer.ini:/bitnami/pgbouncer/conf/pgbouncer.ini
    links:
      - postgres1
    #networks:
    #  cloudcomputing:
    #    ipv4_address: 172.18.0.9
    depends_on:
      - postgres1
      - postgres2

  portainer_agent:
    image: portainer/agent:2.16.2
    ports:
      - 9001:9001/tcp
    #networks:
    #  - portainer_agent_network
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == windows
    volumes:
      - '\\.\pipe\docker_engine,dst=\\.\pipe\docker_engine \'
      - 'C:\ProgramData\docker\volumes,dst=C:\ProgramData\docker\volumes\'

  
  portainer:
    image: portainer/portainer
    #command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
    #volumes:
    #  - portainer_data:/data
    #networks:
    #  - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]  

volumes:
  pg-config:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "postgres"

networks:
  cloudcomputing:
    driver: bridge
    ipam:
      config:
      - subnet: 172.18.0.0/16